<!-- 
    REDESIGNED STAYNEST NAVBAR (EJS VERSION)
    - Added a new "✨ AI Assistant" button.
    - Added the HTML structure for the offcanvas chat sidebar.
-->

<!-- Navbar -->
<nav class="staynest-navbar-v2 navbar navbar-expand-lg sticky-top bg-white" id="navbar">
    <div class="container-fluid nav-container">

        <!-- Logo -->
        <a class="navbar-brand d-flex align-items-center" href="/">
            
            <div class="logo" data-aos="fade-right">Stay<span>Nest</span></div>
        </a>

        <!-- Center Search Bar with Icon -->
        <div class="search-container d-none d-lg-flex">
            <form action="/listings/search" method="GET" class="d-flex position-relative w-100">
                <input class="form-control rounded-pill" type="search" name="q" placeholder="Search destinations" aria-label="Search">
                <button type="submit" class="btn search-btn">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </button>
            </form>
        </div>

        <!-- Right Actions: Host, AI & Profile -->
        <div class="nav-actions">
          <a href="/" class="host-link d-none d-lg-block">Home</a>
            <a href="/listings/new" class="host-link d-none d-lg-block">Become a host</a>
            
            <!-- AI Assistant Button -->
            <button class="btn ai-assistant-btn d-none d-lg-flex" type="button" data-bs-toggle="offcanvas" data-bs-target="#aiChatbot" aria-controls="aiChatbot">
                <i class="fa-solid fa-wand-magic-sparkles me-2"></i> AI Assistant
            </button>
            
            <!-- Profile Dropdown -->
            <div class="dropdown profile-dropdown">
                <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fa-solid fa-bars"></i>
                    <i class="fa-solid fa-user-circle fs-4 text-secondary"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <% if(!currUser) { %>
                        <li><a class="dropdown-item fw-bold" href="/signup">Sign up</a></li>
                        <li><a class="dropdown-item" href="/login">Log in</a></li>
                    <% } else { %>
                        <li><a class="dropdown-item" href="/account">My Account</a></li>
                        <li><a class="dropdown-item" href="/logout">Log out</a></li>
                    <% } %>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="/listings/new">Host your home</a></li>
                    <!-- Mobile AI Assistant Link -->
                    <li class="d-lg-none"><a class="dropdown-item" href="#" data-bs-toggle="offcanvas" data-bs-target="#aiChatbot">AI Assistant</a></li>
                    <li><a class="dropdown-item" href="#">Help Center</a></li>
                </ul>
            </div>
        </div>
    </div>
</nav>

<!-- Mobile Search Bar with Icon -->
<div class="d-lg-none p-3 bg-light border-bottom search-container">
     <form action="/listings/search" method="GET" class="d-flex position-relative w-100">
        <input class="form-control rounded-pill" type="search" name="q" placeholder="Search destinations" aria-label="Search">
        <button type="submit" class="btn search-btn">
            <i class="fa-solid fa-magnifying-glass"></i>
        </button>
    </form>
</div>


<!-- AI Chatbot Offcanvas Sidebar -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="aiChatbot" aria-labelledby="aiChatbotLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="aiChatbotLabel">✨ StayNest Assistant</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body d-flex flex-column">
        <div class="chat-body flex-grow-1" id="chatBody">
            <!-- Chat messages will appear here -->
            <div class="chat-message bot">
                Hi there! Ask me anything about travel destinations or planning your stay.
            </div>
        </div>
        <div class="chat-footer mt-3">
            <input type="text" id="chatInput" class="form-control" placeholder="Ask a question...">
            <button class="btn btn-primary" id="sendMessage">
                <i class="fa-solid fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // --- Existing Navbar Scroll Effect ---
    const navbar = document.getElementById('navbar');
    if (navbar) {
        window.addEventListener('scroll', () => {
            navbar.classList.toggle('scrolled', window.scrollY > 10);
        });
    }

    // --- New Chatbot Logic ---
    const sendMessageBtn = document.getElementById('sendMessage');
    const chatInput = document.getElementById('chatInput');
    const chatBody = document.getElementById('chatBody');

    if (sendMessageBtn && chatInput && chatBody) {
        // Function to add a message to the chat body
        const addMessage = (message, sender, id = null) => {
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat-message ${sender}`;
            if (id) {
                messageDiv.id = id;
            }
            messageDiv.textContent = message;
            chatBody.appendChild(messageDiv);
            // Scroll to the bottom
            chatBody.scrollTop = chatBody.scrollHeight;
            return messageDiv; // Return the element to allow updating it later
        };
        
        // Function to update a message (for loading indicators)
        const updateMessage = (element, newMessage) => {
            if (element) {
                element.textContent = newMessage;
            }
        };

        // Function to call the Gemini API
        const getGeminiResponse = async (userMessage) => {
            // IMPORTANT: The API key is handled by the environment. Do not add it here.
            const apiKey = ""; 
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            
            const prompt = `You are a helpful travel assistant for a website called StayNest. A user is asking: "${userMessage}". Provide a friendly and concise response.`;

            const payload = {
                contents: [{ parts: [{ text: prompt }] }]
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) {
                    // Throw an error with the status text to provide more context
                    throw new Error(`API request failed with status ${response.status}: ${response.statusText}`);
                }
                const result = await response.json();
                // Add a check to ensure the response structure is as expected
                if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts.length > 0) {
                    return result.candidates[0].content.parts[0].text;
                } else {
                    throw new Error("Invalid response structure from API.");
                }
            } catch (error) {
                // Log the detailed error to the console for debugging
                console.error("Error calling Gemini API:", error);
                // Return a more informative error message to the user
                return `Sorry, I'm having trouble connecting. Please check the console for details. (Error: ${error.message})`;
            }
        };

        // Handle sending a message
        const handleSendMessage = async () => {
            const userMessage = chatInput.value.trim();
            if (userMessage === "") return;

            addMessage(userMessage, 'user');
            chatInput.value = ""; // Clear input field
            chatInput.disabled = true; // Disable input while bot is replying
            sendMessageBtn.disabled = true;

            // Add a "typing" indicator
            const loadingIndicator = addMessage("Bot is typing...", 'bot', 'loading-indicator');

            // Get and display the bot's response
            const botResponse = await getGeminiResponse(userMessage);
            
            // Update the "typing" message with the actual response
            updateMessage(loadingIndicator, botResponse);
            
            chatInput.disabled = false; // Re-enable input
            sendMessageBtn.disabled = false;
            chatInput.focus();
        };

        sendMessageBtn.addEventListener('click', handleSendMessage);
        // Allow sending with the "Enter" key
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleSendMessage();
            }
        });
    }
});
</script>
